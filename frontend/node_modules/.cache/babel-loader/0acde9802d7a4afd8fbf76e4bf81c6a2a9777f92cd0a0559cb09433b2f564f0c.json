{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Development\\\\3_ReactJS\\\\0_React Practices\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport noteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const host = \"http://127.0.0.1:5000\";\n\n  // Getting All Notes\n  const [notes, setNotes] = useState([]);\n  const fetchAllNotes = async () => {\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\"\n      }\n    });\n    const allNotes = await response.json();\n    setNotes(allNotes);\n  };\n\n  //AddNote\n  const addNote = async (title, description, tag) => {\n    //adding notes to DB\n    const response = await fetch(`${host}/api/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\"\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    fetchAllNotes();\n    //adding notes to frontend\n    // const parsedResponse = await response.json();\n    // setNotes(notes.concat(parsedResponse));\n  };\n\n  //DeleteNote\n  const deleteNote = async id => {\n    await fetch(`${host}/api/notes/deletenotes/${id}`, {\n      method: \"DELETE\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\"\n      }\n    });\n    fetchAllNotes();\n    // just to delete note from the front end\n    // const newNotes = notes.filter((note) => {\n    //   return note._id !== id;\n    // });\n    // setNotes(newNotes);\n  };\n\n  //EditNote\n  const editNote = async (id, title, description, tag) => {\n    //Changing in DB\n    const body = JSON.stringify({\n      title,\n      description,\n      tag\n    });\n    const response = await fetch(`${host}/api/notes/updatenotes/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\"\n      },\n      body: body\n    });\n    const parsedResponse = await response.json();\n    console.log(parsedResponse);\n    //Changing on frontend\n    const newNotes = JSON.parse(JSON.stringify(notes));\n    for (let i = 0; i < newNotes.length; i++) {\n      if (newNotes[i]._id === id) {\n        newNotes[i].title = title;\n        newNotes[i].description = description;\n        newNotes[i].tag = tag;\n        break;\n      }\n    }\n    setNotes(newNotes);\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      fetchAllNotes\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"GQLmJKrKSWtt27ULSmYSMpXke/c=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["noteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","host","notes","setNotes","fetchAllNotes","response","fetch","method","headers","allNotes","json","addNote","title","description","tag","body","JSON","stringify","deleteNote","id","editNote","parsedResponse","console","log","newNotes","parse","i","length","_id","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Web Development/3_ReactJS/0_React Practices/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import noteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n  const host = \"http://127.0.0.1:5000\";\r\n\r\n  // Getting All Notes\r\n  const [notes, setNotes] = useState([]);\r\n  const fetchAllNotes = async () => {\r\n    const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n      method: \"GET\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\",\r\n      },\r\n    });\r\n    const allNotes = await response.json();\r\n    setNotes(allNotes);\r\n  };\r\n\r\n  //AddNote\r\n  const addNote = async (title, description, tag) => {\r\n    //adding notes to DB\r\n    const response = await fetch(`${host}/api/notes/addnotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\",\r\n      },\r\n      body: JSON.stringify({title, description, tag})\r\n    });\r\n    fetchAllNotes();\r\n    //adding notes to frontend\r\n    // const parsedResponse = await response.json();\r\n    // setNotes(notes.concat(parsedResponse));\r\n    \r\n  };\r\n\r\n  //DeleteNote\r\n  const deleteNote = async (id) => {\r\n      await fetch(`${host}/api/notes/deletenotes/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\",\r\n      },\r\n    });\r\n    fetchAllNotes();\r\n    // just to delete note from the front end\r\n    // const newNotes = notes.filter((note) => {\r\n    //   return note._id !== id;\r\n    // });\r\n    // setNotes(newNotes);\r\n  };\r\n\r\n  //EditNote\r\n  const editNote = async (id, title, description, tag) => {\r\n    //Changing in DB\r\n    const body = JSON.stringify({title, description, tag})\r\n    const response = await fetch(`${host}/api/notes/updatenotes/${id}`,{\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp7ImlkIjoiNjRhOTQ4NGY1MmI5ZDVjZDRjYjlkNmVlIn0sImlhdCI6MTY4OTA2MTkyN30.coa6qVmo4RN2nIuDrSvjW_drJLqfF65XXzxENL4Rwe8\"\r\n      },\r\n      body: body\r\n    })\r\n    const parsedResponse = await response.json();\r\n    console.log(parsedResponse);\r\n    //Changing on frontend\r\n    const newNotes = JSON.parse(JSON.stringify(notes));\r\n    for(let i=0;i<newNotes.length;i++)\r\n    {\r\n      if(newNotes[i]._id === id)\r\n      {\r\n        newNotes[i].title = title;\r\n        newNotes[i].description = description;\r\n        newNotes[i].tag = tag;\r\n        break;\r\n      }\r\n    }\r\n    setNotes(newNotes);\r\n  };\r\n\r\n  return (\r\n    <noteContext.Provider\r\n      value={{ notes, addNote, deleteNote, editNote, fetchAllNotes }}\r\n    >\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}