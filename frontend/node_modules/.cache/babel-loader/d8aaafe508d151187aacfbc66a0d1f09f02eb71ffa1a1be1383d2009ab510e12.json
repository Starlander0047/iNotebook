{"ast":null,"code":"var _jsxFileName = \"E:\\\\Web Development\\\\3_ReactJS\\\\0_React Practices\\\\inotebook\\\\src\\\\context\\\\notes\\\\NoteState.js\",\n  _s = $RefreshSig$();\nimport noteContext from \"./noteContext\";\nimport { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NoteState = props => {\n  _s();\n  const [DBerror, setDBerror] = useState(false); //to check if db is connected\n\n  const host = \"http://127.0.0.1:5000\";\n\n  // Getting All Notes\n  const [notes, setNotes] = useState([]);\n  const fetchAllNotes = async () => {\n    try {\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\n        method: \"GET\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": sessionStorage.getItem(\"iNotebookAuthToken\")\n        }\n      });\n      const allNotes = await response.json();\n      setNotes(allNotes);\n    } catch (error) {\n      setDBerror(true);\n      console.log(\"Server is Down! Retry Later\");\n    }\n  };\n\n  //AddNote\n  const addNote = async (title, description, tag) => {\n    //adding notes to DB\n    await fetch(`${host}/api/notes/addnotes`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": sessionStorage.getItem(\"iNotebookAuthToken\")\n      },\n      body: JSON.stringify({\n        title,\n        description,\n        tag\n      })\n    });\n    showAlert(\"Note Added Succesfully\", \"success\");\n    fetchAllNotes();\n  };\n\n  //DeleteNote\n  const deleteNote = async id => {\n    if (window.confirm(\"You want to delete this note?\")) {\n      await fetch(`${host}/api/notes/deletenotes/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n          \"auth-token\": sessionStorage.getItem(\"iNotebookAuthToken\")\n        }\n      });\n      showAlert(\"Note Deleted Succesfully\", \"success\");\n      fetchAllNotes();\n    }\n  };\n\n  //EditNote\n  const editNote = async (id, title, description, tag) => {\n    //Changing in DB\n    const body = JSON.stringify({\n      title,\n      description,\n      tag\n    });\n    await fetch(`${host}/api/notes/updatenotes/${id}`, {\n      method: \"PUT\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n        \"auth-token\": sessionStorage.getItem(\"iNotebookAuthToken\")\n      },\n      body: body\n    });\n    showAlert(\"Note Updated Succesfully\", \"success\");\n    fetchAllNotes();\n  };\n\n  //Alert Functions\n  const [alert, setAlert] = useState(null);\n  const showAlert = (message, type) => {\n    setAlert({\n      message,\n      type\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  };\n  return /*#__PURE__*/_jsxDEV(noteContext.Provider, {\n    value: {\n      notes,\n      addNote,\n      deleteNote,\n      editNote,\n      fetchAllNotes,\n      DBerror,\n      alert,\n      showAlert\n    },\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(NoteState, \"Og5SweLVXdfmO5TReRJxmeOzcXI=\");\n_c = NoteState;\nexport default NoteState;\nvar _c;\n$RefreshReg$(_c, \"NoteState\");","map":{"version":3,"names":["noteContext","useState","jsxDEV","_jsxDEV","NoteState","props","_s","DBerror","setDBerror","host","notes","setNotes","fetchAllNotes","response","fetch","method","headers","sessionStorage","getItem","allNotes","json","error","console","log","addNote","title","description","tag","body","JSON","stringify","showAlert","deleteNote","id","window","confirm","editNote","alert","setAlert","message","type","setTimeout","Provider","value","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Web Development/3_ReactJS/0_React Practices/inotebook/src/context/notes/NoteState.js"],"sourcesContent":["import noteContext from \"./noteContext\";\r\nimport { useState } from \"react\";\r\n\r\nconst NoteState = (props) => {\r\n  const [DBerror, setDBerror] = useState(false); //to check if db is connected\r\n\r\n  const host = \"http://127.0.0.1:5000\";\r\n\r\n  // Getting All Notes\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  const fetchAllNotes = async () => {\r\n    try {\r\n      const response = await fetch(`${host}/api/notes/fetchallnotes`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\": sessionStorage.getItem(\"iNotebookAuthToken\"),\r\n        },\r\n      });\r\n      const allNotes = await response.json();\r\n      setNotes(allNotes);\r\n    } catch (error) {\r\n      setDBerror(true);\r\n      console.log(\"Server is Down! Retry Later\");\r\n    }\r\n  };\r\n\r\n  //AddNote\r\n  const addNote = async (title, description, tag) => {\r\n    //adding notes to DB\r\n    await fetch(`${host}/api/notes/addnotes`, {\r\n      method: \"POST\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          sessionStorage.getItem(\"iNotebookAuthToken\"),\r\n      },\r\n      body: JSON.stringify({ title, description, tag }),\r\n    });\r\n    showAlert(\"Note Added Succesfully\",\"success\");\r\n    fetchAllNotes();\r\n  };\r\n\r\n  //DeleteNote\r\n  const deleteNote = async (id) => {\r\n    if(window.confirm(\"You want to delete this note?\"))\r\n    {\r\n      await fetch(`${host}/api/notes/deletenotes/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"auth-token\":\r\n            sessionStorage.getItem(\"iNotebookAuthToken\"),\r\n        },\r\n      });\r\n      showAlert(\"Note Deleted Succesfully\",\"success\");\r\n      fetchAllNotes();\r\n    }\r\n  };\r\n\r\n  //EditNote\r\n  const editNote = async (id, title, description, tag) => {\r\n    //Changing in DB\r\n    const body = JSON.stringify({ title, description, tag });\r\n    await fetch(`${host}/api/notes/updatenotes/${id}`, {\r\n      method: \"PUT\",\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n        \"auth-token\":\r\n          sessionStorage.getItem(\"iNotebookAuthToken\"),\r\n      },\r\n      body: body,\r\n    });\r\n    showAlert(\"Note Updated Succesfully\",\"success\");\r\n    fetchAllNotes();\r\n  };\r\n\r\n  //Alert Functions\r\n  const [alert, setAlert] = useState(null);\r\n  const showAlert = (message, type)=>{\r\n    setAlert({message, type});\r\n    setTimeout(() => {\r\n      setAlert(null);\r\n    }, 2000);\r\n  }\r\n\r\n\r\n  return (\r\n    <noteContext.Provider\r\n      value={{\r\n        notes,\r\n        addNote,\r\n        deleteNote,\r\n        editNote,\r\n        fetchAllNotes,\r\n        DBerror,\r\n        alert,\r\n        showAlert\r\n      }}\r\n    >\r\n      {props.children}\r\n    </noteContext.Provider>\r\n  );\r\n};\r\n\r\nexport default NoteState;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}